/* core_trackerConfiguration 8.7.2 2017-08-02T09:55:48+00:00 e22b35b1d531 (hotfix/8.7.2) tip */
!function(){"use strict";function t(t,n){function e(t,n,e){return e.detailCached(t.deviceId).then(n.getResData).then(function(t){return!_.isUndefined(t.c8y_MotionTracking)})}var r=n("Settings"),o="crosshairs";t.when("/device/:deviceId",{name:r,icon:o,templateUrl:"core_trackerConfiguration/views/trackerConfiguration.html",controller:"trackerConfigurationCtrl",controllerAs:"tracker",showIf:["$routeParams","c8yBase","c8yDevices",e]})}angular.module("c8y.trackerConfiguration",[]).config(["c8yViewsProvider","gettext",t])}(),function(){"use strict";function t(t,n,e,r,o,a,i,s,c,l,u,p,d,g,m,v,k){function f(){b(),h(t.deviceId)}function b(){s.list().then(function(t){I.supportedModels=t})}function h(t){I.device=null,I.modelInfo=null,t=t.id||t;var e=o.detailRealtime(t),r=e.then(s.modelByDevice);n.all([e,r]).then(function(t){I.device=t[0],I.modelInfo=t[1],I.device&&I.modelInfo&&(I.restart=new c(I.device,I.modelInfo,I),I.sos=new l(I.device,I.modelInfo,I),I.alarms=new u(I.device,I.modelInfo,I),I.situation=new p(I.device,I.modelInfo,I),I.location=new d(I.device,I.modelInfo,I))})}function y(t,n,e){i.success(k.getString(t,R(n,e)))}function M(t,n,e,r){r.failureReason?i.danger(k.getString(t,R(e,r))):i.danger(k.getString(n,R(e,r)))}function R(t,n){return{operation:{description:t&&t.description&&k.getString(t.description)},operationResult:{failureReason:n&&n.failureReason&&k.getString(n.failureReason)}}}var I=this;_.assign(I,g),I.scope=e,I.newModel={name:null,save:function(){return o.save({id:I.device.id,c8y_Hardware:_.assign(I.device.c8y_Hardware||{},{model:I.newModel.name})}).then(r.getResData).then(h)}},I.execute=function(t,n){return a.createWithNotifications(t).then(function(e){return e.created.then(function(){y(v('"{{operation.description}}" operation has been sent!'),t),n.pending=!0}),e.completed.then(function(e){e.status===a.status.SUCCESSFUL?y(v('"{{operation.description}}" operation has been completed successfully!'),t,e):e.status===a.status.FAILED&&M(v('"{{operation.description}}" operation has failed with reason "{{operationResult.failureReason}}"!'),v('"{{operation.description}}" operation has failed!'),t,e),n.pending=!1}),e})},f()}t.$inject=["$routeParams","$q","$scope","c8yBase","c8yDevices","c8yDeviceControl","c8yAlert","trackerModelsSvc","trackerRestartSvc","trackerSosSvc","trackerAlarmsSvc","trackerSituationSvc","trackerLocationSvc","UnitConversionHelperSvc","RealtimeLockupSvc","gettext","gettextCatalog"],angular.module("c8y.trackerConfiguration").controller("trackerConfigurationCtrl",t)}(),function(){"use strict";function t(t){function n(n){return _.assign(a,{c8y_Mobile:{msisdn:n}}),t.save(a).then(e)}function e(){o.isDisabled=!0}function r(){o.isDisabled=!1}var o=this,a=o.device;r(),a&&a.c8y_Mobile&&a.c8y_Mobile.msisdn&&e(),o.save=n}t.$inject=["c8yDevices"],angular.module("c8y.trackerConfiguration").controller("msisdnAlertCtrl",t)}(),function(){"use strict";function t(){return{restrict:"EA",templateUrl:"core_trackerConfiguration/views/msisdnAlert.html",controller:"msisdnAlertCtrl",controllerAs:"$ctrl",bindToController:{device:"="}}}angular.module("c8y.trackerConfiguration").directive("c8yMsisdnAlert",t)}(),function(){"use strict";function t(t,n){return function(e,r,o){function a(n){t.RTLU.getBlock(s.armAlarms)?t.RTLU.infoChange(s.armAlarms,!0):s.status={vibration:n.vibration,noise:n.noise,door:n.door,sos:n.sos}}function i(){return{vibration:e.c8y_RFV16Config&&e.c8y_RFV16Config.vibrationAlarmArm,noise:e.c8y_RFV16Config&&e.c8y_RFV16Config.noiseAlarmArm,door:e.c8y_RFV16Config&&e.c8y_RFV16Config.doorAlarmArm,sos:e.c8y_RFV16Config&&e.c8y_RFV16Config.sosAlarmArm}}var s=this;s.list=[{key:"vibration",label:n("Vibration alarm"),supported:r.supportedOperations.armAlarms.vibration},{key:"noise",label:n("Noise alarm"),supported:r.supportedOperations.armAlarms.noise},{key:"door",label:n("Door alarm"),supported:r.supportedOperations.armAlarms.door},{key:"sos",label:n("SOS alarm"),supported:r.supportedOperations.armAlarms.sos}],s.armAlarms=function(){return o.execute({deviceId:e.id,description:n("Arm alarms"),c8y_ArmAlarm:s.getC8yArmAlarm()},s.armAlarms)},s.getC8yArmAlarm=function(){return _.reduce(s.status,function(t,n,e){return r.supportedOperations.armAlarms[e]&&(t[e]=n),t},{})},s.blockAlarmsChange=function(){t.RTLU.block(s.armAlarms,!0)},s.refreshAlarms=function(){t.RTLU.clearLockup(s.armAlarms),s.status=i()},s.armAlarms.supported=_.some(r.supportedOperations.armAlarms),s.armAlarms.supported&&o.scope.$watch(i,a,!0)}}t.$inject=["RealtimeLockupSvc","gettext"],angular.module("c8y.trackerConfiguration").factory("trackerAlarmsSvc",t)}(),function(){"use strict";function t(t,n,e,r,o){return function(t,a,i){function s(t){r.RTLU.getBlock(u.setReportIntervalOnMotion)?r.RTLU.infoChange(u.setReportIntervalOnMotion,!0):u.reportIntervalOnMotion=t}function c(t){r.RTLU.getBlock(u.setReportIntervalNoMotion)?r.RTLU.infoChange(u.setReportIntervalNoMotion,!0):u.reportIntervalNoMotion=t}function l(t){r.RTLU.getBlock(u.setMotionTracking)?r.RTLU.infoChange(u.setMotionTracking,!0):u.motionTracking=t}var u=this;u.units=i.getTimeUnits(),u.getSingle=function(){return i.execute({deviceId:t.id,description:o("Get single location"),c8y_MeasurementRequestOperation:{requestName:"location"}},u.getSingle)},u.setReportIntervalNoMotion=function(){return i.execute({deviceId:t.id,description:o("Position reporting interval if no motion detected"),c8y_Tracking:{interval:i.convertToSeconds(u.reportIntervalNoMotion,u.setReportIntervalNoMotion.unit)}},u.setReportIntervalNoMotion).then(function(r){r.completed.then(function(r){if(r.status===n.status.SUCCESSFUL){var o=t.c8y_RequiredAvailability&&t.c8y_RequiredAvailability.responseInterval,a=i.convertToUnits(u.reportIntervalNoMotion,_.find(u.units,{value:"minutes"}),u.setReportIntervalNoMotion.unit.multiplier);o!==a&&e.save({id:t.id,c8y_RequiredAvailability:{responseInterval:a}})}})})},u.setReportIntervalOnMotion=function(){return i.execute({deviceId:t.id,description:o("Position reporting interval if motion detected"),c8y_MotionTracking:u.getMotionTracking()},u.setReportIntervalOnMotion)},u.getMotionTracking=function(){var n={};return t.c8y_MotionTracking&&!_.isUndefined(t.c8y_MotionTracking.active)&&(n.active=u.motionTracking),n.interval=i.convertToSeconds(u.reportIntervalOnMotion,u.setReportIntervalOnMotion.unit),n},u.setMotionTracking=function(){return i.execute({deviceId:t.id,description:o("Motion tracking"),c8y_MotionTracking:{active:u.motionTracking}},u.setMotionTracking)},u.blockReportIntervalOnMotionChange=function(){r.RTLU.block(u.setReportIntervalOnMotion,!0)},u.blockReportintervalNoMotionChange=function(){r.RTLU.block(u.setReportIntervalNoMotion,!0)},u.blockMotionTrackingChange=function(){r.RTLU.block(u.setMotionTracking.blocked,!0)},u.refreshReportIntervalOnMotion=function(){r.RTLU.clearLockup(u.setReportIntervalOnMotion),u.setReportIntervalOnMotion.unit=u.units[0],u.reportIntervalOnMotion=t.c8y_MotionTracking&&t.c8y_MotionTracking.interval},u.refreshReportIntervalNoMotion=function(){r.RTLU.clearLockup(u.setReportIntervalNoMotion),u.setReportIntervalNoMotion.unit=u.units[0],u.reportIntervalNoMotion=t.c8y_Tracking&&t.c8y_Tracking.interval},u.refreshMotionTracking=function(){r.RTLU.clearLockup(u.setMotionTracking),u.motionTracking=t.c8y_MotionTracking&&t.c8y_MotionTracking.active},u.getSingle.supported=a.supportedOperations.getSingleLocation,u.setReportIntervalNoMotion.supported=a.supportedOperations.reportIntervalNoMotion,u.setReportIntervalOnMotion.supported=a.supportedOperations.reportIntervalOnMotion,u.setMotionTracking.supported=a.supportedOperations.motionTracking,u.setReportIntervalOnMotion.supported&&i.scope.$watch("tracker.device.c8y_MotionTracking.interval",s),u.setReportIntervalNoMotion.supported&&i.scope.$watch("tracker.device.c8y_Tracking.interval",c),u.setMotionTracking.supported&&i.scope.$watch("tracker.device.c8y_MotionTracking.active",l),u.setReportIntervalOnMotion.unit=u.setReportIntervalNoMotion.unit=u.units[0]}}t.$inject=["c8yBase","c8yDeviceControl","c8yDevices","RealtimeLockupSvc","gettext"],angular.module("c8y.trackerConfiguration").factory("trackerLocationSvc",t)}(),function(){"use strict";function t(t){return function(n,e,r){var o=this;o.execute=function(){return r.execute({deviceId:n.id,description:t("Restart tracker"),c8y_Restart:{}},o.execute)},o.execute.supported=e.supportedOperations.restart}}t.$inject=["gettext"],angular.module("c8y.trackerConfiguration").factory("trackerRestartSvc",t)}(),function(){"use strict";function t(t){return function(n,e,r){var o=this;o.update=function(){return r.execute({deviceId:n.id,description:t("Update tracker situation"),c8y_MeasurementRequestOperation:{requestName:"situation"}},o.update)},o.update.supported=e.supportedOperations.updateSituation}}t.$inject=["gettext"],angular.module("c8y.trackerConfiguration").factory("trackerSituationSvc",t)}(),function(){"use strict";function t(t,n){return function(e,r,o){function a(n){t.RTLU.getBlock(i.setSosNumber)?t.RTLU.infoChange(i.setSosNumber,!0):i.number=n}var i=this;i.setSosNumber=function(){return o.execute({deviceId:e.id,description:n("Set SOS number"),c8y_SetSosNumber:i.getC8ySetSosNumber()},i.setSosNumber)},i.getC8ySetSosNumber=function(){return{phoneNumber:i.number}},i.blockSosNumberChange=function(){t.RTLU.block(i.setSosNumber,!0)},i.refreshSosNumber=function(){t.RTLU.clearLockup(i.setSosNumber),i.number=e.c8y_RFV16Config&&e.c8y_RFV16Config.sosNumber},i.setSosNumber.supported=r.supportedOperations.setSosNumber,i.setSosNumber.supported&&o.scope.$watch("tracker.device.c8y_RFV16Config.sosNumber",a)}}t.$inject=["RealtimeLockupSvc","gettext"],angular.module("c8y.trackerConfiguration").factory("trackerSosSvc",t)}(),function(){"use strict";function t(t){function n(){return[{label:t("seconds"),value:"seconds",multiplier:1},{label:t("minutes"),value:"minutes",multiplier:60},{label:t("hours"),value:"hours",multiplier:3600}]}function e(t,n){return t*n.multiplier}function r(t,n,e){return _.ceil(t*e/n.multiplier)}var o={};return o.convertToSeconds=e,o.getTimeUnits=n,o.convertToUnits=r,o}t.$inject=["gettext"],angular.module("c8y.trackerConfiguration").factory("UnitConversionHelperSvc",t)}(),function(){"use strict";function t(){var t={},n={block:function(t,n){return _.assign(t,{blocked:!!n})},infoChange:function(t,n){return _.assign(t,{changedInfo:!!n})},clearLockup:function(t){return _.assign(t,{blocked:!1},{changedInfo:!1})},getBlock:function(t){if(t)return t.blocked}};return t.RTLU=n,t}angular.module("c8y.trackerConfiguration").factory("RealtimeLockupSvc",t)}(),function(){"use strict";function t(t){var n;n='<div class="form-group alert alert-warning" ng-hide="$ctrl.isDisabled">\r\n  <label translate>MSISDN is not set for tracker. Set it now.</label>\r\n  <div class="input-group" style="width: 250px">\r\n    <input type="text" name="msisdn" ng-model="msisdn" class="form-control" placeholder="{{\'e.g. +495434323210\' | translate}}" ng-pattern="/^\\+?[\\d|\\s]+$/">\r\n    <div class="input-group-btn">\r\n      <button class="btn btn-primary" ng-disabled="trackerForm.msisdn.$invalid || !msisdn" ng-click="$ctrl.save(msisdn)">\r\n        {{"Set" | translate}}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n',t.put("core_trackerConfiguration/views/msisdnAlert.html",n),t.put("/apps/core/trackerConfiguration/views/msisdnAlert.html",n),n='<div ng-if="tracker.device">\n  <div ng-if="!tracker.device.c8y_Hardware.model || !tracker.modelInfo">\n    <div ng-if="!tracker.device.c8y_Hardware.model">\n      <div class="alert alert-warning" translate>\n        No tracker model specified for this device! Choose one from the list of supported models below.\n      </div>\n    </div>\n    <div ng-if="tracker.device.c8y_Hardware.model && !tracker.modelInfo">\n      <div class="alert alert-warning" translate>\n        Unsupported tracker model "{{tracker.device.c8y_Hardware.model}}"! Choose supported one from the list below.\n      </div>\n    </div>\n    <div>\n      <ui-select style="z-index:20" ng-model="tracker.newModel.name">\n        <ui-select-match placeholder="{{\'Select tracker model\' | translate}}">\n          {{$select.selected.name}}\n        </ui-select-match>\n        <ui-select-choices repeat="model.name as model in tracker.supportedModels | orderBy:\'name\' | filterByFields:$select.search:[\'name\',\'description\']:true">\n          <div>\n            <strong>{{model.name}}</strong>\n            <p>\n              <small class="text-muted">\n                {{model.description | translate}}\n              </small>\n            </p>\n          </div>\n        </ui-select-choices>\n      </ui-select>\n      <button type="button" class="btn btn-primary" ng-click="tracker.newModel.save()" ng-disabled="!tracker.newModel.name" translate>\n        Save\n      </button>\n    </div>\n  </div>\n\n  <div ng-if="tracker.device">\n    <div ng-if="tracker.device.c8y_Hardware.model && !tracker.modelInfo.supportedOperations">\n      <div class="alert alert-warning" translate>\n        Please, use your manage tool to change the setup.\n      </div>\n    </div>\n  </div>\n\n  <form name="trackerForm" novalidate>\n\n    <c8y-msisdn-alert device="tracker.device"></c8y-msisdn-alert>\n\n    <div class="form-group" ng-if="tracker.restart.execute.supported">\n      <div class="alert alert-info pull-right">\n        <i c8y-icon="info"></i>\n        <translate>Note: you may need to restart your device to actually apply new settings.</translate>\n      </div>\n\n      <label translate>Restart</label>\n      <div class="form-control-static">\n        <button type="button" class="btn btn-primary" ng-click="tracker.restart.execute()" ng-disabled="tracker.restart.execute.pending">\n          <span ng-show="!tracker.restart.execute.pending">\n            <translate>Restart tracker</translate>\n          </span>\n          <span ng-show="tracker.restart.execute.pending">\n            <i c8y-icon="spinner" class="fa-spin"></i>\n            <translate>Restarting tracker</translate>&hellip;</span>\n        </button>\n      </div>\n    </div>\n\n    <div class="form-group" ng-if="tracker.location.setReportIntervalNoMotion.supported">\n      <label translate>Position reporting interval if no motion detected</label>\n      <div class="input-group" style="width: 250px" ng-class="{\'has-error\': trackerForm.reportIntervalNoMotion.$dirty && trackerForm.reportIntervalNoMotion.$invalid}">\n        <input type="text" name="reportIntervalNoMotion" ng-model="tracker.location.reportIntervalNoMotion" class="form-control" placeholder="{{\'e.g. 10\' | translate}}" ng-pattern="/^[\\d]+$/" ng-change="tracker.location.blockReportintervalNoMotionChange()" style="width:95px">\n        <span class="input-group-btn">\n          <select name="unit" class="form-control" ng-model="tracker.location.setReportIntervalNoMotion.unit" ng-options="item as (item.label | translate) for item in tracker.location.units" style="min-width: 110px" ng-change="tracker.location.blockReportintervalNoMotionChange(); tracker.location.reportIntervalNoMotion = tracker.convertToUnits(tracker.location.reportIntervalNoMotion, tracker.location.setReportIntervalNoMotion.unit, {{tracker.location.setReportIntervalNoMotion.unit.multiplier}})"></select>\n        </span>\n        <span class="input-group-btn">\n          <button type="button" class="btn btn-primary" ng-click="tracker.location.setReportIntervalNoMotion()" ng-disabled="tracker.location.setReportIntervalNoMotion.pending || trackerForm.reportIntervalNoMotion.$invalid">\n            <span ng-show="!tracker.location.setReportIntervalNoMotion.pending">\n              <translate>Set</translate>\n            </span>\n            <span ng-show="tracker.location.setReportIntervalNoMotion.pending">\n              <i c8y-icon="spinner" class="fa-spin"></i>\n              <translate>Setting</translate>&hellip;</span>\n          </button>\n        </span>\n      </div>\n      <c8y-alert-on-item alert-text="{{\'Value has been changed while you were modifying it\' | translate}}" alert-show="tracker.location.setReportIntervalNoMotion.changedInfo" alert-btn-text="{{\'refresh\' | translate}}" alert-btn-action="tracker.location.refreshReportIntervalNoMotion()" alert-btn-icon="refresh"></c8y-alert-on-item>\n    </div>\n\n    <div class="form-group" ng-if="tracker.location.setMotionTracking.supported">\n      <label translate>Motion tracking</label>\n      <div>\n        <div class="btn-group" style="margin: 10px 0">\n          <button type="button" class="btn btn-default" ng-model="tracker.location.motionTracking" ng-disabled="tracker.location.motionTracking.pending" ng-change="tracker.location.blockMotionTrackingChange()" uib-btn-checkbox>\n            <i c8y-icon="minus-circle" class="text-danger" ng-show="!tracker.location.motionTracking"></i>\n            <i c8y-icon="check-circle" class="text-success" ng-show="tracker.location.motionTracking"></i>\n            <span translate>Motion tracking</span>\n          </button>\n          <button type="button" class="btn btn-primary" ng-click="tracker.location.setMotionTracking()" ng-disabled="tracker.location.setMotionTracking.pending">\n            <span ng-show="!tracker.location.setMotionTracking.pending">\n              <translate>Set motion tracking</translate>\n            </span>\n            <span ng-show="tracker.location.setMotionTracking.pending">\n              <i c8y-icon="spinner" class="fa-spin"></i>\n              <translate>Setting motion tracking</translate>&hellip;</span>\n          </button>\n        </div>\n        <c8y-alert-on-item alert-text="{{\'Value has been changed while you were modifying it\' | translate}}" alert-show="tracker.location.setMotionTracking.changedInfo" alert-btn-text="{{\'refresh\' | translate}}" alert-btn-action="tracker.location.refreshMotionTracking()" alert-btn-icon="refresh"></c8y-alert-on-item>\n      </div>\n    </div>\n\n    <div class="form-group" ng-if="tracker.location.setReportIntervalOnMotion.supported">\n      <label translate>Position reporting interval if motion detected</label>\n      <div class="input-group" style="width: 250px" ng-class="{\'has-error\': trackerForm.reportIntervalOnMotion.$dirty && trackerForm.reportIntervalOnMotion.$invalid}">\n        <input type="text" name="reportIntervalOnMotion" ng-model="tracker.location.reportIntervalOnMotion" class="form-control" placeholder="{{\'e.g. 10\' | translate}}" ng-pattern="/^[\\d]+$/" ng-change="tracker.location.blockReportIntervalOnMotionChange()" ng-disabled="!(tracker.location.motionTracking||tracker.location.setReportIntervalOnMotion.changedInfo)" style="width:95px">\n        <span class="input-group-btn">\n          <select name="unit" class="form-control" ng-model="tracker.location.setReportIntervalOnMotion.unit" ng-options="item as (item.label | translate) for item in tracker.location.units" style="min-width: 110px" ng-change="tracker.location.blockReportIntervalOnMotionChange(); tracker.location.reportIntervalOnMotion = tracker.convertToUnits(tracker.location.reportIntervalOnMotion, tracker.location.setReportIntervalOnMotion.unit, {{tracker.location.setReportIntervalOnMotion.unit.multiplier}})" ng-disabled="!(tracker.location.motionTracking||tracker.location.setReportIntervalOnMotion.changedInfo)"></select>\n        </span>\n        <span class="input-group-btn">\n          <button type="button" class="btn btn-primary" ng-click="tracker.location.setReportIntervalOnMotion()" ng-disabled="tracker.location.setReportIntervalOnMotion.pending || trackerForm.reportIntervalOnMotion.$invalid || !(tracker.location.motionTracking || tracker.location.setReportIntervalOnMotion.changedInfo)">\n            <span ng-show="!tracker.location.setReportIntervalOnMotion.pending">\n              <translate>Set</translate>\n            </span>\n            <span ng-show="tracker.location.setReportIntervalOnMotion.pending">\n              <i c8y-icon="spinner" class="fa-spin"></i>\n              <translate>Setting</translate>&hellip;</span>\n          </button>\n        </span>\n      </div>\n      <c8y-alert-on-item alert-text="{{\'Value has been changed while you were modifying it\' | translate}}" alert-show="tracker.location.setReportIntervalOnMotion.changedInfo" alert-btn-text="{{\'refresh\' | translate}}" alert-btn-action="tracker.location.refreshReportIntervalOnMotion()" alert-btn-icon="refresh"></c8y-alert-on-item>\n    </div>\n\n    <div class="form-group" ng-if="tracker.sos.setSosNumber.supported">\n      <label translate>SOS contact number</label>\n      <div class="input-group" style="width: 250px" ng-class="{\'has-error\': trackerForm.sosNumber.$dirty && trackerForm.sosNumber.$invalid}">\n        <input type="text" name="sosNumber" ng-model="tracker.sos.number" class="form-control" placeholder="{{\'e.g. +495434323210\' | translate}}" ng-pattern="/^\\+?[\\d|\\s]+$/" ng-change="tracker.sos.blockSosNumberChange()">\n        <span class="input-group-btn">\n          <button type="button" class="btn btn-primary" ng-click="tracker.sos.setSosNumber()" ng-disabled="tracker.sos.setSosNumber.pending">\n            <span ng-show="!tracker.sos.setSosNumber.pending">\n              <translate>Set</translate>\n            </span>\n            <span ng-show="tracker.sos.setSosNumber.pending">\n              <i c8y-icon="spinner" class="fa-spin"></i>\n              <translate>Setting</translate>&hellip;</span>\n          </button>\n        </span>\n      </div>\n      <c8y-alert-on-item alert-text="{{\'Value has been changed while you were modifying it\' | translate}}" alert-show="tracker.sos.setSosNumber.changedInfo" alert-btn-text="{{\'refresh\' | translate}}" alert-btn-action="tracker.sos.refreshSosNumber()" alert-btn-icon="refresh"></c8y-alert-on-item>\n    </div>\n\n    <div class="form-group" ng-if="tracker.alarms.armAlarms.supported">\n      <label translate>Alarms</label>\n      <div>\n        <div class="btn-group" style="margin: 10px 0">\n          <button type="button" class="btn btn-default" ng-repeat="alarm in tracker.alarms.list" ng-if="alarm.supported" ng-model="tracker.alarms.status[alarm.key]" ng-disabled="tracker.alarms.armAlarms.pending" ng-change="tracker.alarms.blockAlarmsChange()" uib-btn-checkbox>\n            <i c8y-icon="minus-circle" class="text-danger" ng-show="!tracker.alarms.status[alarm.key]"></i>\n            <i c8y-icon="check-circle" class="text-success" ng-show="tracker.alarms.status[alarm.key]"></i>\n            <span ng-bind="alarm.label | translate"></span>\n          </button>\n        </div>\n      </div>\n      <div class="form-control-static">\n        <button type="button" class="btn btn-primary" ng-click="tracker.alarms.armAlarms()" ng-disabled="tracker.alarms.armAlarms.pending">\n          <span ng-show="!tracker.alarms.armAlarms.pending">\n            <translate>Set alarms</translate>\n          </span>\n          <span ng-show="tracker.alarms.armAlarms.pending">\n            <i c8y-icon="spinner" class="fa-spin"></i>\n            <translate>Setting alarms</translate>&hellip;</span>\n        </button>\n      </div>\n      <c8y-alert-on-item alert-text="{{\'Value has been changed while you were modifying it\' | translate}}" alert-show="tracker.alarms.armAlarms.changedInfo" alert-btn-text="{{\'refresh\' | translate}}" alert-btn-action="tracker.alarms.refreshAlarms()" alert-btn-icon="refresh"></c8y-alert-on-item>\n    </div>\n\n    <div class="form-group" ng-if="tracker.situation.update.supported">\n      <label translate>Tracker situation</label>\n      <div class="form-control-static">\n        <button type="button" class="btn btn-primary" ng-click="tracker.situation.update()" ng-disabled="tracker.situation.update.pending">\n          <span ng-show="!tracker.situation.update.pending">\n            <translate>Update tracker situation</translate>\n          </span>\n          <span ng-show="tracker.situation.update.pending">\n            <i c8y-icon="spinner" class="fa-spin"></i>\n            <translate>Updating tracker situation</translate>&hellip;</span>\n        </button>\n      </div>\n    </div>\n\n    <div class="form-group" ng-if="tracker.location.getSingle.supported">\n      <label translate>Single location</label>\n      <div class="form-control-static">\n        <button type="button" class="btn btn-primary" ng-click="tracker.location.getSingle()" ng-disabled="tracker.location.getSingle.pending">\n          <span ng-show="!tracker.location.getSingle.pending">\n            <translate>Get single location</translate>\n          </span>\n          <span ng-show="tracker.location.getSingle.pending">\n            <i c8y-icon="spinner" class="fa-spin"></i>\n            <translate>Getting single location</translate>&hellip;</span>\n        </button>\n      </div>\n    </div>\n  </form></div>\n\n',t.put("core_trackerConfiguration/views/trackerConfiguration.html",n),t.put("/apps/core/trackerConfiguration/views/trackerConfiguration.html",n)}angular.module("c8y.trackerConfiguration").run(["$templateCache",t])}();