/* core_csvExporter 8.7.2 2017-08-02T09:54:04+00:00 e22b35b1d531 (hotfix/8.7.2) tip */
!function(){angular.module("c8y.csvExporter",["ngCsv"])}(),function(){"use strict";function e(e){var t="c8y.csvExporter.csvConfig",a=[{label:e("comma - ,"),value:","},{label:e("semi-colon - ;"),value:";"},{label:e("tab - \\t"),value:"\t"}],r=[{label:e("point - ."),value:"."},{label:e("comma - ,"),value:","}],n=["utf-8"],i={fieldSeperator:a[0].value,decimalSeperator:r[0].value,textDelimiter:'"',charset:n[0]};return{configKey:t,fieldSeperators:a,decimalSeperators:r,charsets:n,defaultConfig:i}}angular.module("c8y.csvExporter").factory("csvExporterSvc",["gettext",e])}(),function(){function e(e,t,a,r){function n(){e.csvExporter={},i()}function i(){var r=t.getLocal(s);e.csvExporter.config=r||a.defaultConfig}function l(a){t.setLocal(s,a),e.$close()}function o(){e.$dismiss()}var s=a.configKey;n(),e.title=r("Export as CSV"),e.saveConfig=l,e.dismiss=o,e.charsets=a.charsets,e.fieldSeperators=a.fieldSeperators,e.decimalSeperators=a.decimalSeperators}angular.module("c8y.csvExporter").controller("csvExporterCtrl",["$scope","c8yUtil","csvExporterSvc","gettext","gettextCatalog",e])}(),function(){"use strict";function e(e,t){function a(a,r){r.bind("click",function(){e.open({templateUrl:"core_csvExporter/views/csvExporter.html",controller:"csvExporterCtrl",scope:a})}),a.headers=function(){var e=_.cloneDeep(a.virginHeaders());return _.map(e,function(e,a){return 0===a&&"ID"===e&&(e="id"),t.getString(e)})}}return{restrict:"A",link:a,scope:{fileName:"@c8yFilename",data:"&c8yData",virginHeaders:"&c8yHeaders",ngClick:"&"}}}angular.module("c8y.csvExporter").directive("c8yCsvExporter",["$uibModal","gettextCatalog",e])}(),!function(e){angular.module("ngCsv.config",[]).value("ngCsv.config",{debug:!0}).config(["$compileProvider",function(e){angular.isDefined(e.urlSanitizationWhitelist)?e.urlSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/):e.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)}]),angular.module("ngCsv.directives",["ngCsv.services"]),angular.module("ngCsv.services",[]),angular.module("ngCsv",["ngCsv.config","ngCsv.services","ngCsv.directives","ngSanitize"]),angular.module("ngCsv.services").service("CSV",["$q",function(e){var t="\r\n",a="\ufeff",r={"\\t":"\t","\\b":"\b","\\v":"\v","\\f":"\f","\\r":"\r"};this.stringifyField=function(e,t){return"locale"===t.decimalSep&&this.isFloat(e)?e.toLocaleString():"."!==t.decimalSep&&this.isFloat(e)?e.toString().replace(".",t.decimalSep):"string"==typeof e?(e=e.replace(/"/g,'""'),(t.quoteStrings||e.indexOf(",")>-1||e.indexOf("\n")>-1||e.indexOf("\r")>-1)&&(e=t.txtDelim+e+t.txtDelim),e):"boolean"==typeof e?e?"TRUE":"FALSE":e},this.isFloat=function(e){return+e===e&&(!isFinite(e)||Boolean(e%1))},this.stringify=function(r,n){var i=e.defer(),l=this,o="",s="",c=e.when(r).then(function(e){if(angular.isDefined(n.header)&&n.header){var r,c;r=[],angular.forEach(n.header,function(e){this.push(l.stringifyField(e,n))},r),c=r.join(n.fieldSep?n.fieldSep:","),s+=c+t}var d=[];angular.isArray(e)?d=e:angular.isFunction(e)&&(d=e()),angular.forEach(d,function(e,a){var r,i,o=angular.copy(d[a]);i=[],angular.forEach(o,function(e){this.push(l.stringifyField(e,n))},i),r=i.join(n.fieldSep?n.fieldSep:","),s+=a<d.length?r+t:r}),n.addByteOrderMarker&&(o+=a),o+=s,i.resolve(o)});return"function"==typeof c.catch&&c.catch(function(e){i.reject(e)}),i.promise},this.isSpecialChar=function(e){return void 0!==r[e]},this.getSpecialChar=function(e){return r[e]}}]),angular.module("ngCsv.directives").directive("ngCsv",["$parse","$q","CSV","$document","$timeout",function(t,a,r,n,i){return{restrict:"AC",scope:{data:"&ngCsv",filename:"@filename",header:"&csvHeader",txtDelim:"@textDelimiter",decimalSep:"@decimalSeparator",quoteStrings:"@quoteStrings",fieldSep:"@fieldSeparator",lazyLoad:"@lazyLoad",addByteOrderMarker:"@addBom",ngClick:"&",charset:"@charset"},controller:["$scope","$element","$attrs","$transclude",function(e,t,n){function i(){var t={txtDelim:e.txtDelim?e.txtDelim:'"',decimalSep:e.decimalSep?e.decimalSep:".",quoteStrings:e.quoteStrings,addByteOrderMarker:e.addByteOrderMarker};return angular.isDefined(n.csvHeader)&&(t.header=e.$eval(e.header)),t.fieldSep=e.fieldSep?e.fieldSep:",",t.fieldSep=r.isSpecialChar(t.fieldSep)?r.getSpecialChar(t.fieldSep):t.fieldSep,t}e.csv="",angular.isDefined(e.lazyLoad)&&"true"==e.lazyLoad||angular.isArray(e.data)&&e.$watch("data",function(){e.buildCSV()},!0),e.getFilename=function(){return e.filename||"download.csv"},e.buildCSV=function(){var l=a.defer();return t.addClass(n.ngCsvLoadingClass||"ng-csv-loading"),r.stringify(e.data(),i()).then(function(a){e.csv=a,t.removeClass(n.ngCsvLoadingClass||"ng-csv-loading"),l.resolve(a)}),e.$apply(),l.promise}}],link:function(t,a){function r(){var a=t.charset||"utf-8",r=new Blob([t.csv],{type:"text/csv;charset="+a+";"});if(e.navigator.msSaveOrOpenBlob)navigator.msSaveBlob(r,t.getFilename());else{var l=angular.element("<a></a>");l.attr("href",e.URL.createObjectURL(r)),l.attr("download",t.getFilename()),l.attr("target","_blank"),n.find("body").append(l),i(function(){l[0].click(),l.remove()},null)}}a.bind("click",function(){t.buildCSV().then(function(){r()}),t.$apply()})}}}])}(window,document),function(){"use strict";function e(e){var t;t='<div class="modal-header" ng-show="title">\n  <h3>{{title | translate}}</h3>\n</div>\n<div class="modal-body">\n  <div>\n    <form class="form-horizontal" name="csvExporterForm">\n      <div class="form-group">\n        <label class="control-label col-sm-3">{{\'Field separator\' | translate}}:</label>\n        <div class="col-sm-9">\n          <select ng-options="s.value as (s.label | translate) for s in fieldSeperators" class="form-control" ng-model="csvExporter.config.fieldSeperator"></select>\n        </div>\n      </div>\n      <div class="form-group">\n        <label class="control-label col-sm-3">{{\'Decimal separator\' | translate}}:</label>\n        <div class="col-sm-9">\n          <select ng-options="s.value as (s.label | translate) for s in decimalSeperators" class="form-control" ng-model="csvExporter.config.decimalSeperator"></select>\n        </div>\n      </div>\n      <div class="form-group">\n        <label class="control-label col-sm-3">{{\'Charset\' | translate}}:</label>\n        <div class="col-sm-9">\n          <select ng-options="charset for charset in charsets" class="form-control" ng-model="csvExporter.config.charset"></select>\n        </div>\n      </div>\n      <div class="checkbox">\n        <label>\n            <input type="checkbox" ng-model="csvExporter.config.quoteStrings"> <translate>Quote strings</translate>\n        </label>\n      </div>\n      <div class="checkbox">\n        <label>\n            <input type="checkbox" ng-model="csvExporter.config.addBom"> <translate>Add Byte Order Mask (for Windows)</translate>\n        </label>\n      </div>\n    </form>\n  </div>\n</div>\n<div class="modal-footer">\n  <button class="btn btn-primary" ng-csv="data()" filename="{{fileName}}" csv-header="headers()" field-separator="{{csvExporter.config.fieldSeperator}}" decimal-separator="{{csvExporter.config.decimalSeperator}}" text-delimiter="{{csvExporter.config.textDelimiter}}" ng-attr-quote-strings="{{csvExporter.config.quoteStrings || undefined }}" ng-attr-add-bom="{{csvExporter.config.addBom || undefined }}" charset="{{ csvExporter.config.charset }}" ng-click="saveConfig(csvExporter.config)">\n      <translate>Download</translate>\n  </button>\n  <button class="btn btn-default" ng-click="dismiss()" translate>Close</button>\n</div>\n',e.put("core_csvExporter/views/csvExporter.html",t),e.put("/apps/core/csvExporter/views/csvExporter.html",t)}angular.module("c8y.csvExporter").run(["$templateCache",e])}();